# Generated by Django 3.1.7 on 2021-03-21 12:29

import django.contrib.gis.db.models.fields
import django.contrib.gis.geos.point
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Auszeichnung',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Autorin',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vorname', models.CharField(max_length=255, null=True)),
                ('nachname', models.CharField(max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Beitrag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titel', models.CharField(max_length=1024)),
                ('regest', models.TextField()),
                ('signatur', models.CharField(max_length=255)),
                ('einzel_gruppe', models.BooleanField(default=True)),
                ('umfang', models.IntegerField()),
                ('zeitraumVon', models.IntegerField()),
                ('zeitraumBis', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Beitragsart',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='DokumentTyp',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('typName', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='HistorischeRegion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='HistorischerOrt',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Institution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Materialgrundlage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Persoenlichkeit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('gnd', models.CharField(max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Schulart',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Schule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1024)),
            ],
        ),
        migrations.CreateModel(
            name='Tutor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=255)),
                ('vorname', models.CharField(max_length=255, null=True)),
                ('nachname', models.CharField(max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Wettbewerb',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('thema', models.TextField()),
                ('kurztitel', models.TextField()),
                ('jahr', models.IntegerField()),
                ('zusammenfassung', models.TextField(default='Zusammenfassung')),
            ],
        ),
        migrations.CreateModel(
            name='SchuleSchulart',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('art', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='karte.schulart')),
                ('schule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='karte.schule')),
            ],
            options={
                'unique_together': {('schule', 'art')},
            },
        ),
        migrations.AddField(
            model_name='schule',
            name='art',
            field=models.ManyToManyField(blank=True, through='karte.SchuleSchulart', to='karte.Schulart'),
        ),
        migrations.CreateModel(
            name='Ort',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ortbezeichnung', models.CharField(max_length=255)),
                ('location', django.contrib.gis.db.models.fields.PointField(default=django.contrib.gis.geos.point.Point(0.0, 0.0), geography=True, srid=4326)),
                ('beitraege', models.ManyToManyField(blank=True, to='karte.Beitrag')),
                ('histName', models.ManyToManyField(blank=True, to='karte.HistorischerOrt')),
                ('histRegion', models.ManyToManyField(blank=True, to='karte.HistorischeRegion')),
            ],
        ),
        migrations.CreateModel(
            name='Dokument',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dokument', models.FileField(upload_to='')),
                ('typ', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='karte.dokumenttyp')),
            ],
        ),
        migrations.CreateModel(
            name='BeitragWettbewerb',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('beitrag', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='karte.beitrag', unique=True)),
                ('wettbewerb', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='karte.wettbewerb')),
            ],
            options={
                'unique_together': {('beitrag', 'wettbewerb')},
            },
        ),
        migrations.AddField(
            model_name='beitrag',
            name='dokument',
            field=models.ManyToManyField(blank=True, to='karte.Dokument'),
        ),
        migrations.AddField(
            model_name='beitrag',
            name='grundlagen',
            field=models.ManyToManyField(blank=True, to='karte.Materialgrundlage'),
        ),
        migrations.AddField(
            model_name='beitrag',
            name='institutionen',
            field=models.ManyToManyField(blank=True, to='karte.Institution'),
        ),
        migrations.AddField(
            model_name='beitrag',
            name='persoenlichkeiten',
            field=models.ManyToManyField(blank=True, to='karte.Persoenlichkeit'),
        ),
        migrations.AddField(
            model_name='beitrag',
            name='tutor',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='karte.tutor'),
        ),
        migrations.AddField(
            model_name='beitrag',
            name='typ',
            field=models.ManyToManyField(blank=True, to='karte.Beitragsart'),
        ),
        migrations.AddField(
            model_name='beitrag',
            name='wettbewerb',
            field=models.ManyToManyField(blank=True, through='karte.BeitragWettbewerb', to='karte.Wettbewerb'),
        ),
        migrations.CreateModel(
            name='AutorinSchule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('jahrgangsstufe', models.IntegerField(null=True)),
                ('autorin', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='karte.autorin')),
                ('schule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='karte.schuleschulart')),
            ],
            options={
                'unique_together': {('schule', 'autorin')},
            },
        ),
        migrations.AddField(
            model_name='autorin',
            name='beitrag',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='karte.beitrag'),
        ),
        migrations.AddField(
            model_name='autorin',
            name='schule',
            field=models.ManyToManyField(blank=True, through='karte.AutorinSchule', to='karte.SchuleSchulart'),
        ),
        migrations.CreateModel(
            name='AuszeichnungEinreichung',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('auszeichnung', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='karte.auszeichnung')),
                ('einreichung', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='karte.beitrag')),
            ],
        ),
    ]
